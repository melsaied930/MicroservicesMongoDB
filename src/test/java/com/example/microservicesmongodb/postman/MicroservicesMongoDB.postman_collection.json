{
	"info": {
		"_postman_id": "85edc942-32bf-4e5b-9b0f-829fff586194",
		"name": "MicroservicesMongoDB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19098906"
	},
	"item": [
		{
			"name": "/movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"// pm.test(\"Response time is less than 200ms\", function () {",
							"//   pm.expect(pm.response.responseTime).to.be.below(200);",
							"// });",
							"",
							"",
							"pm.test(\"Validate the response schema for required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(movie => {",
							"        pm.expect(movie).to.have.property('id');",
							"        pm.expect(movie).to.have.property('plot');",
							"        pm.expect(movie).to.have.property('genres');",
							"        pm.expect(movie).to.have.property('runtime');",
							"        pm.expect(movie).to.have.property('cast');",
							"        pm.expect(movie).to.have.property('numMflixComments');",
							"        pm.expect(movie).to.have.property('poster');",
							"        pm.expect(movie).to.have.property('title');",
							"        pm.expect(movie).to.have.property('languages');",
							"        pm.expect(movie).to.have.property('released');",
							"        pm.expect(movie).to.have.property('directors');",
							"        pm.expect(movie).to.have.property('writers');",
							"        pm.expect(movie).to.have.property('awards');",
							"        pm.expect(movie).to.have.property('lastUpdated');",
							"        pm.expect(movie).to.have.property('year');",
							"        pm.expect(movie).to.have.property('imdb');",
							"        pm.expect(movie).to.have.property('countries');",
							"        pm.expect(movie).to.have.property('type');",
							"        pm.expect(movie).to.have.property('tomatoes');",
							"        pm.expect(movie).to.have.property('plotEmbedding');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "/movies/{{id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/movies/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"movies",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "/movies/search?title={{title}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(movie) {",
							"        pm.expect(movie).to.include.all.keys(",
							"            'id', 'plot', 'genres', 'runtime', 'cast', ",
							"            'numMflixComments', 'poster', 'title', 'fullPlot', ",
							"            'languages', 'released', 'directors', 'writers', ",
							"            'awards', 'lastUpdated', 'year', 'imdb', ",
							"            'countries', 'type', 'tomatoes', 'plotEmbedding'",
							"        );",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(movie) {",
							"        pm.expect(movie.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Genres is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(movie) {",
							"        pm.expect(movie.genres).to.be.an('array').that.is.not.empty;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/movies/search?title=The Great Train Robbery",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"movies",
						"search"
					],
					"query": [
						{
							"key": "title",
							"value": "The Great Train Robbery"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys(",
							"        \"id\", \"title\"",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"1\",\n    \"plot\": \"\",\n    \"genres\": [],\n    \"runtime\": 0,\n    \"cast\": [],\n    \"numMflixComments\": 0,\n    \"poster\": \"\",\n    \"title\": \"The New Movie\",\n    \"fullPlot\": \"\",\n    \"languages\": [],\n    \"released\": \"\",\n    \"directors\": [],\n    \"writers\": [],\n    \"awards\": {},\n    \"lastUpdated\": \"\",\n    \"year\": \"\",\n    \"imdb\": {},\n    \"countries\": [],\n    \"type\": \"\",\n    \"tomatoes\": {},\n    \"plotEmbedding\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "/movies/{{id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response body should be null\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							"",
							"pm.test(\"Schema validation for the response body is successful\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/movies/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"movies",
						"1"
					]
				}
			},
			"response": []
		}
	]
}